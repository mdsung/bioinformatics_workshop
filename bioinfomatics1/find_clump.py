# Clump Finding Problem: Find patterns forming clumps in a string.
# Input: A string Genome, and integers k, L, and t.
# Output: All distinct k-mers forming (L, t)-clumps in Genome.

from frequencymap import create_frequency_map

GENOME = "CATTAAATTCCCCAATCAGACGGAGTACGGAGGCTCGGTTTTTGCCGATACAAGTACGTCCCGGCTCCGAGCACTCGTACACCGATTCTTGAGCGTCTGTAGGAAAATGTGCTGATTTGTCGTTTAAGAGCCTGTCACCTTTCCACACTCGATTGATCCAAACCCCATTGACCTGCCTCCTGGGGGTCCGTGCTCACAATAATATTAGTAGGACAAGATAATCTCAGTGTGTACAGTGTTCCGTTCGATGACAGTCATTACAATTCGGGGAGGCGCCCGTATGGCTTTGAAGGATCATCGCATAGTAGGGGTCATGCGACTCTGTATTACTCTTGTACATGAGAGGGCATACCGCTGCAACGTCGGCCGCATCCTGGCCAGTATGTTTCAAAGAGGAATCAGAGGAATCGGAGGAATCGGATTGGACATTGGCTGAGGTTTTATCAGGACCGTCAGACTCAGACGTCAGACGTCTTTTGGCCAATTCAGTCGGACCTCGGGAGGTTGTCAATAGCCATGCCATCTACCGAAGCCTGACGACGATTATAATGCTGAAAAGTGGGGTGGGTGCCCGCTGGTGGTGCCCGCTCGCAATTGACTTCAAGACTCAGGTAGTATGTTTAGTGACGACCCTTAGTCAAGGCAAAGGCCTTTTTTCTAAGACACTTTTTACTAGAGCCGGTGAGGGCCTCATCGCGCATTAGGACGCTGCCGCCTTTTGAGCTGTTACACCTTATTCCTCGCTTCTTCGGTCTTCCCCATCAGCTTCTAGAGCATCGACATCCCCATCGCTTTACTGCGTCTCGCAGACCATGACAAGGGTCGTAACTCTTCTCCCAAAACTAGGAGCATGAAGTTCAAGCTGGCGATACGCATGCAACTCACGATTGTACATGCCCGGTCTAGCTGGAGGATGGATCTAGCTGGAGATGCAGTAAGTCTCGACGTTTCACTCTGCAGGTTCGTTATCAAGCTCTACTTTGTCCAGCCCGAGAAAACACAAGGGTAAGCAAGTACCGATGGGAGGTGCCAGGATTCCCTCTTCTTGACTCTTGAAGATCCTTGAAGATCCTGTTCAACGGGGCAGCAGCGGCCCTGAGATAACTTTCACCTTACGTCAAGTTGCGTAAATACCACGGAATAAACTGCAGCATTCTCGGTACCGTGAACCAGACTCTGACAATTATATAGCAGCTGTTAGGCCTCTCTTGGGCTCCGGAATTCTTCCGGAATTTATTTGAGTGTGTCCAACTTGAAGGGACGCAGGTGTAGTAATGGACGTAACGTATTCGCAACGCCGTAATGTAGGTCGGAGTCAATTGCTAGCGCCGTCCGTACTTCAGCAAGAGTGAGTGCAAGCGCGAGTGCAAGCGCCTACTCAGCCGACCAGGCAGTAAATAATTCTGTCAAAAAATTCTGTCAGGTGGTCGTCTTCATGGAGCGTGGTTAGAAGAGCGAGCTGGAGAGCTGCTTCTCGGTCTCGTGCGTCATAATAGCCGTCGTTGACCACCGTTGACCACACCGAATTCCGTCTTATCACTGTATCTTATCACTGATCAAACCGACCAGAGAACAATTCCCTGTCCCCTGTTTGATAACTCAGAGGCCTATACGCACCGAATCGGAACGCAATACACCATTGACTCTGCGAGCATTAGGATAAATGGTAATACCGATCAGCCGGGGTCAGCCGGGGTCAGCCGGGGTCAGCCGGGGTCAGCCGGGGTCAGCCGGGGTTAATAGGGTTTAATAGGGTTTAATAGGGTTTAATAGGGTTTAATAGGGTTTAATAGGGTT"
k = 10  
L = 26 # window length
t = 3 # threshold

def find_clumps(genome, word_length, window_length, num_threshold):
    patterns = []

    genome_length = len(genome)
    
    for i in range(0, genome_length - window_length):
        windows = genome[i:i + window_length]
        freqmap, _ = create_frequency_map(windows, word_length)
        for key in freqmap.keys():
            if freqmap[key] >= num_threshold:
                patterns.append(key)
    
    return list(set(patterns))
 
def main():
    result = find_clumps(GENOME, k, L, t)
    print(result, sep = " ")
    

if __name__ == "__main__":
    main()