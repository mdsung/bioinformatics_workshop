## Hamming Distance Problem: Compute the Hamming distance between two strings.
## Input: Two strings of equal length.
## Output: The Hamming distance between these strings.

def calculate_hamming_distance(genome1:str, genome2:str) -> int:
    assert len(genome1) == len(genome2)
    distance = 0
    for i in range(len(genome1)):
        if genome1[i] != genome2[i]:
            distance += 1
    return distance

def main():
    genome1 = "GCCGTGTCGTTATCACGGGTGCCTACGAGCTACATCTCAGTGAGGCATACCATGGTTGCAATGGACCCACGACACGATATCTTTCACGCTTACTGTTGTAAATGATATCGACAAGGGATAGTCGTTCTCGGCGATCACGGTCCACGTCTGCATAACACTATACGCAGCAGCTCGAAAATCTGTATTCCTTGGATGGCGGTCATACCTACCATCGTGGGCGATATCAATTGCAGTAATTTGTACAATGCTCATAAAGGACGCCTCGCAATTAATCTTTATCGATTGTGAAAGTTTAGGGGTAGGCTAAGCACCGTTACGTGAGTTCTAGTCGAAACGCGTTAGGAAATGTTACCCCCTCGTATTAAACGACGGATCAGAGTTTGATCGTTAAAACAATCTTATTACTGGATAACGCACACTGGTCATATGGTGACACAAACCGTGAGGAAGTGGCCACTAAGGCTCTTGTGACAGTTACGCCATCGGTCACAGTATACCGCCCTCTACCCCATTCTCGTTCGCACGCACGGGTCCGCTCCCTGCAGGGGGGCCTCCTAGAATCTGGAGTGTATGCAGCCGCAATCAAGGTGATACTAGCTGAGCCAGGCTGAAAGATGCGTTGTACTGTGACGGCGCGCTGACATCTGGACACTTTTTCTCTAGAGATGAGCAGTCCATTTAGAAAATTTTGCATGGGCCATAACTACAAGGTGACTTCGTTTCACCAAACTCCTCCTCGACACATACAGTGCAGTTGATGTGGCACGTGATTATATGTCGCTAAAAGTGCCTTAGAGTATCCTGACTTGCTTAGACTCCCAGGACATGAGGTGGCGTTATATAGCCCCTATTCAGACTGTGCCAGTACGCACGTAGCTCGTTGCTAGAAGGCGAAAGCGCGAAACCGACCGCCTGTGCAATTGATCTTACATACTTCAGACTATGCGCCCTGGCGGAAGCTTCCTGCATCTTCACAGACAGAACATTGAACGCTACCTATGGACCGAGACTAGTGCCGTTTGCGAAGCCACCGCCGTTCCAGGCCATTCGTGCCATTCTGTGTGTAGCCAGTCAAACAGGAGATTACAGAGAATAATGCCGAAATCGTCTGCAATCAGTTACGCGTGAAGAGTTG"
    genome2 = "AGAGCACGGTTGCCGACTTCGACCTCTTGGAATACTCCAGCAAATCCGCTACTGGCAGGGCTCCCCACTCTATCCGGGGGTAGTGGAGTTGAAAGTTGATGGCCGGCAGGCATGTTGTGGCGAGGAGTGGGTCACATTGTATCATATTAAGCGCCAGTCTTTGAAAGGTGAATCACACATAATACGAGCATATTCGGTAGTTCGCACGTGGCCCTAGATAACAAATGCACTGAGGTGCCCTAATTTCTTCCCTTTACGAACGCAGCAGAAGAGCTGGCTGCCCTGTGTGTTGCAAGAGCATACCTTAGCCCTCAAATAGCGCACGTGCTTTCCTCCACGTGCTCTTCTACCCCCCGAGATGTGCTACTAGCGTTAAGAAGTCTCACAGGCTATAGAGAGCTATGACGATCATTATTTATCAGCCTTGTAAGATTCCTTTTTGCGTAATGACTCAATTGCTATATTTAAGAATTAATTTACTCGCAATGGCTACAAGCCTTTTATTTATGCCAAGGAAGGAGTAAACAAGACTAAGCTGCCTAATGGCTGTTTACCTTTCGCATGTCCAACTTTTCCGTAACGGCTCACTAGCTTGGGCATCTTGTGGTACCGCTAGCCCCTTACAGCCGAACCACAGAATTAGATCATCCCTGAGCACAAACCTCCCTTCATAGGCTACCTCCAAGGTCACAATAATCGCACCAACGGTCGTCATAACCGCCCTGGCAACCCACTGCTAAGTAATAGAAGACATACGGACGTGCGCTGTATAAGCGCACGATTGGAGCATCGTTTTGATGGAGCCGTACTCATAAAGACGGAGCACTCGATTAAAGCCTATCAACAACGAGCGGTGATCGCCGCGCGTAACAGGCCCACTCCCGATAATGCTGAACCGTGTGGTTGTAGAAGTGGAGAAGCCCTATGCGAGCCGTACAGCTCCAACCCTCCAGTAAAAGTCTGTGGTCGAGTGAACGTACGGACCCCGGTCGATTGTCGGGGAACTCCTAACGGAATTAACGAAACGTCGAGCGTCGTGAAGCCACTGTCGTTGCGGGTTGGTTAACCCTGAGAAACCCCCTACGGGCAAACCCGGCGTGATTCCAAAACTGCAATGTGGGCCAGAGGCTTCTGC"
    distance = calculate_hamming_distance(genome1, genome2)
    print(distance)

if __name__ == '__main__':
    main()